name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:  

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5  

      - name: Verify Terraform Installation
        run: terraform --version 

      - name: Set AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "TF_VAR_aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_db_user=${{ secrets.TF_DB_USER }}" >> $GITHUB_ENV
          echo "TF_VAR_db_password=${{ secrets.TF_DB_PASS }}" >> $GITHUB_ENV
          echo "TF_VAR_db_name=${{ secrets.TF_DB_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_db_port=${{ secrets.TF_DB_PORT }}" >> $GITHUB_ENV
          echo "TF_VAR_port=${{ secrets.TF_PORT }}" >> $GITHUB_ENV

      - name: Deploy Infrastructure Using Terraform
        run: |
          cd terraform 
          terraform init -reconfigure
          terraform apply -auto-approve

      - name: Wait for RDS to be available
        run: |
          echo "Waiting for RDS instance to be available..."
          sleep 60  # Wait for 1 minutes for RDS instance to be available completely

  build-push-image:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm' 

      - name: Install Dependencies
        run: npm ci 

      - name: Compile TypeScript
        run: npx tsc 

      - name: Set up AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Build Docker Image
        run: docker build -t log-api .

      - name: Tag Docker Image
        run: docker tag log-api:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/log-api:latest

      - name: Push Docker Image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/log-api:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-push-image
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Register New ECS Task Definition with Correct Image
        run: |
          aws ecs describe-task-definition --task-definition log-api-task > task_def.json
          jq '.taskDefinition.containerDefinitions[0].image = "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/log-api:latest"' task_def.json > new_task_def.json
          aws ecs register-task-definition --cli-input-json file://new_task_def.json

      - name: Update ECS Service to Use New Task Definition
        run: |
          aws ecs update-service --cluster log-api-cluster --service log-api-service --force-new-deployment


      - name: Register New ECS Task Definition with Correct Image
        run: |
          aws ecs describe-task-definition --task-definition log-api-task --region us-east-1 > task_def.json

          jq '{
            family: .taskDefinition.family,
            executionRoleArn: .taskDefinition.executionRoleArn,
            networkMode: .taskDefinition.networkMode,
            containerDefinitions: (.taskDefinition.containerDefinitions | map(.image = "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/log-api:latest")),
            requiresCompatibilities: .taskDefinition.requiresCompatibilities,
            cpu: .taskDefinition.cpu,
            memory: .taskDefinition.memory
          }' task_def.json > new_task_def.json
          
          aws ecs register-task-definition --cli-input-json file://new_task_def.json --region us-east-1

      - name: Update ECS Service to Use New Task Definition
        run: |
          # Step 4: Get latest task revision
          TASK_REVISION=$(aws ecs describe-task-definition --task-definition log-api-task --query "taskDefinition.revision" --output text --region us-east-1)

          # Step 5: Update ECS service to use the latest revision
          aws ecs update-service --cluster log-api-cluster --service log-api-service --task-definition log-api-task:$TASK_REVISION --force-new-deployment --region us-east-1
